{"version":3,"sources":["Recipie.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","src","App","useState","recipies","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","id","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yMAoBeA,G,KAhBF,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YAChC,OACI,yBAAKC,UAAU,QACX,4BAAKJ,GACL,4BACKG,EAAYE,KAAI,SAACC,GAAD,OAChC,4BAAKA,EAAWC,UAIL,uCAAaN,GACjB,yBAAKO,IAAKN,OC8CHO,MAzDf,WAEA,IAFe,EAKWC,mBAAS,IALpB,mBAKVC,EALU,KAKDC,EALC,OAMQF,mBAAS,IANjB,mBAMVG,EANU,KAMHC,EANG,OAOMJ,mBAAS,WAPf,mBAOVK,EAPU,KAOJC,EAPI,KASfC,qBAAU,WACRC,MAEA,CAACH,IAGH,IAAMG,EAAU,uCAAC,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAdd,WAcc,oBAbb,qCAYG,cACXM,EADW,gBAEAA,EAASC,OAFT,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAD,qDAkBhB,OACA,yBAAKpB,UAAU,OACf,wBAAIuB,GAAG,MAAK,8FACZ,wBAAIvB,UAAU,MAAd,mFAEC,wBAAIA,UAAU,MAAd,wDAEC,0BAAMwB,SAbQ,SAACC,GACfA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAUiBV,UAAU,eACvC,2BAAOA,UAAU,aAAa2B,KAAK,OAAOC,MAAOnB,EAAQoB,SAnBtC,SAACJ,GAClBf,EAAUe,EAAEK,OAAOF,UAmBrB,4BAAQ5B,UAAU,gBAAgB2B,KAAK,UAAvC,WAEA,yBAAK3B,UAAU,WACdO,EAASN,KAAI,SAAC8B,GAAD,OACZ,6BACE,kBAAC,EAAD,CAAQnC,MAAOmC,EAAOA,OAAOC,MAAOnC,SAAUkC,EAAOA,OAAOlC,SAC5DC,MAAOiC,EAAOA,OAAOjC,MAAOC,YAAagC,EAAOA,OAAOhC,qBCxCvCkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.a21666d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\n\r\n\r\nconst Recipe=({title,calories,image,ingredients})=>{\r\n    return(\r\n        <div className=\"last\">\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map((ingredient)=>\r\n(<li>{ingredient.text}</li>\r\n) )}               \r\n\r\n</ol>\r\n            <p>Calories:{calories}</p>\r\n        <img src={image}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React, { useEffect,useState } from 'react';\nimport Recipe from './Recipie'\nimport './App.css';\n\nfunction App() {\n\nconst APP_ID=\"a1030fb9\";\nconst APP_KEY=\"3da47756c03d88fa653e2f50ba282295\";\t\n\nlet [recipies,setRecipes]=useState([]);\nlet [search,setSearch]=useState(\"\");\nlet [query,setQuery]=useState(\"chicken\")\n\nuseEffect(()=>{\n  getRecipes();\n \n},[query]);\n\n\nconst getRecipes=async()=>{\nconst response= await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\nconst data=await response.json();\nsetRecipes(data.hits)\nconsole.log(data.hits)\n}\n\nconst updateSearch=(e)=>{\n  setSearch(e.target.value)\n  \n}\n\nconst getSearch=(e)=>{\n  e.preventDefault();\n  setQuery(search)\n  setSearch(\"\")\n}\n\nreturn (\n<div className=\"App\">\n<h5 id=\"mm\"><u>Hello! Welcome to Yummy Recipe Web Application by Kevin Jacob.</u></h5>\n<h2 className=\"mi\">Travel around the world without leaving home with these world-class recipes ;-)</h2>\n\n <h2 className=\"mi\">Search your favourite recipe in the search box below</h2>\n\n  <form onSubmit={getSearch} className=\"search-form\">\n<input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}></input>\n<button className=\"search-button\" type=\"submit\" >search</button>\n</form>\n<div className=\"recipes\">\n{recipies.map((recipe)=>(\n  <div>\n    <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories} \n    image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\n    </div>\n)\n)}\n</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}